local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local DataStoreService = game:GetService("DataStoreService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Kh·ªüi t·∫°o DataStore
local WebhookDataStore = DataStoreService:GetDataStore("PlayerWebhooks")

-- T·∫°o c√°c RemoteEvents/Functions
local SetWebhookEvent = Instance.new("RemoteEvent")
SetWebhookEvent.Name = "SetWebhook"
SetWebhookEvent.Parent = ReplicatedStorage

local TestWebhookEvent = Instance.new("RemoteFunction")
TestWebhookEvent.Name = "TestWebhook"
TestWebhookEvent.Parent = ReplicatedStorage

local DeleteWebhookEvent = Instance.new("RemoteEvent")
DeleteWebhookEvent.Name = "DeleteWebhook"
DeleteWebhookEvent.Parent = ReplicatedStorage

local GetSavedWebhookEvent = Instance.new("RemoteFunction")
GetSavedWebhookEvent.Name = "GetSavedWebhook"
GetSavedWebhookEvent.Parent = ReplicatedStorage

-- Bi·∫øn l∆∞u tr·ªØ t·∫°m
local playerWebhooks = {}
local lastSaveTimes = {}

-- H√†m ki·ªÉm tra webhook h·ª£p l·ªá
local function validateWebhook(url)
    if type(url) ~= "string" then return false end
    if #url > 250 then return false end
    return string.match(url, "^https://discord%.com/api/webhooks/%w+/%w+$") ~= nil
end

-- H√†m ki·ªÉm tra rate limit
local function canSaveToDataStore(player)
    local now = os.time()
    local lastSave = lastSaveTimes[player.UserId] or 0
    local cooldown = 60 -- 60 gi√¢y cooldown
    
    if now - lastSave < cooldown then
        return false, cooldown - (now - lastSave)
    end
    
    lastSaveTimes[player.UserId] = now
    return true, 0
end

-- H√†m l∆∞u webhook v·ªõi retry
local function saveWebhookToDataStore(player, webhookUrl)
    local retries = 3
    local success = false
    
    for i = 1, retries do
        success = pcall(function()
            WebhookDataStore:SetAsync(player.UserId, webhookUrl)
            return true
        end)
        
        if success then break end
        warn(`[DataStore] L·ªói l·∫ßn {i} khi l∆∞u webhook cho {player.Name}`)
        task.wait(1)
    end
    
    return success
end

-- H√†m t·∫£i webhook v·ªõi retry
local function loadWebhookFromDataStore(player)
    local retries = 3
    local webhookUrl = nil
    
    for i = 1, retries do
        local success, result = pcall(function()
            return WebhookDataStore:GetAsync(player.UserId)
        end)
        
        if success then
            webhookUrl = result
            break
        end
        warn(`[DataStore] L·ªói l·∫ßn {i} khi t·∫£i webhook c·ªßa {player.Name}`)
        task.wait(1)
    end
    
    return webhookUrl
end

-- H√†m x√≥a webhook
local function deleteWebhookFromDataStore(player)
    local retries = 3
    local success = false
    
    for i = 1, retries do
        success = pcall(function()
            WebhookDataStore:SetAsync(player.UserId, nil)
            return true
        end)
        
        if success then break end
        warn(`[DataStore] L·ªói l·∫ßn {i} khi x√≥a webhook c·ªßa {player.Name}`)
        task.wait(1)
    end
    
    return success
end

-- H√†m ki·ªÉm tra k·∫øt n·ªëi webhook
local function testWebhookConnection(url)
    local testPayload = {
        embeds = {{
            title = "üîç KI·ªÇM TRA K·∫æT N·ªêI",
            description = "ƒê√¢y l√† tin nh·∫Øn ki·ªÉm tra t·ª´ Roblox",
            color = 16753920, -- M√†u cam
            fields = {
                {
                    name = "Tr·∫°ng th√°i",
                    value = "K·∫øt n·ªëi th√†nh c√¥ng!",
                    inline = true
                },
                {
                    name = "Th·ªùi gian",
                    value = os.date("%d/%m/%Y %H:%M:%S"),
                    inline = true
                }
            },
            footer = {
                text = "Roblox Discord Webhook Tester"
            }
        }}
    }

    local success, response = pcall(function()
        HttpService:PostAsync(
            url,
            HttpService:JSONEncode(testPayload),
            Enum.HttpContentType.ApplicationJson
        )
        return true, "Webhook ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng"
    end)

    if not success then
        if string.find(response, "403") then
            return false, "Webhook b·ªã t·ª´ ch·ªëi (403 Forbidden)"
        elseif string.find(response, "404") then
            return false, "Webhook kh√¥ng t·ªìn t·∫°i (404 Not Found)"
        else
            return false, "L·ªói kh√¥ng x√°c ƒë·ªãnh: "..tostring(response)
        end
    end
    return success, response
end

-- X·ª≠ l√Ω y√™u c·∫ßu ki·ªÉm tra webhook
TestWebhookEvent.OnServerInvoke = function(player, webhookUrl)
    if not validateWebhook(webhookUrl) then
        return false, "URL webhook kh√¥ng h·ª£p l·ªá"
    end
    
    return testWebhookConnection(webhookUrl)
end

-- X·ª≠ l√Ω l∆∞u webhook
SetWebhookEvent.OnServerEvent:Connect(function(player, webhookUrl)
    if not validateWebhook(webhookUrl) then return end
    
    -- Ki·ªÉm tra thay ƒë·ªïi
    local currentWebhook = playerWebhooks[player] or loadWebhookFromDataStore(player)
    if currentWebhook == webhookUrl then return end
    
    -- Ki·ªÉm tra rate limit
    local canSave = canSaveToDataStore(player)
    if not canSave then
        warn(`[DataStore] Rate limit reached for {player.Name}`)
        return
    end
    
    -- L∆∞u webhook
    playerWebhooks[player] = webhookUrl
    saveWebhookToDataStore(player, webhookUrl)
    
    -- G·ª≠i th√¥ng b√°o test
    testWebhookConnection(webhookUrl)
end)

-- X·ª≠ l√Ω x√≥a webhook
DeleteWebhookEvent.OnServerEvent:Connect(function(player)
    local oldWebhook = playerWebhooks[player] or loadWebhookFromDataStore(player)
    
    -- X√≥a webhook
    playerWebhooks[player] = nil
    deleteWebhookFromDataStore(player)
    
    -- G·ª≠i th√¥ng b√°o ƒë·∫øn webhook c≈© (n·∫øu c√≥)
    if oldWebhook and validateWebhook(oldWebhook) then
        local embed = {
            title = "üóëÔ∏è WEBHOOK ƒê√É B·ªä X√ìA",
            description = string.format("Ng∆∞·ªùi ch∆°i **%s** ƒë√£ x√≥a webhook ƒë√£ l∆∞u", player.Name),
            color = 16711680, -- M√†u ƒë·ªè
            fields = {
                {
                    name = "Th·ªùi gian",
                    value = os.date("%d/%m/%Y %H:%M:%S"),
                    inline = true
                },
                {
                    name = "Game",
                    value = game.Name,
                    inline = true
                }
            },
            footer = {
                text = "H·ªá th·ªëng th√¥ng b√°o t·ª± ƒë·ªông"
            }
        }
        
        task.spawn(function()
            pcall(HttpService.PostAsync, HttpService,
                oldWebhook,
                HttpService:JSONEncode({embeds = {embed}}),
                Enum.HttpContentType.ApplicationJson
            )
        end)
    end
end)

-- X·ª≠ l√Ω y√™u c·∫ßu l·∫•y webhook ƒë√£ l∆∞u
GetSavedWebhookEvent.OnServerInvoke = function(player)
    if playerWebhooks[player] then
        return playerWebhooks[player]
    end
    
    local webhookUrl = loadWebhookFromDataStore(player)
    if webhookUrl then
        playerWebhooks[player] = webhookUrl
        return webhookUrl
    end
    
    return ""
end

-- T·ª± ƒë·ªông t·∫£i webhook khi ng∆∞·ªùi ch∆°i join
Players.PlayerAdded:Connect(function(player)
    local webhookUrl = loadWebhookFromDataStore(player)
    if webhookUrl and validateWebhook(webhookUrl) then
        playerWebhooks[player] = webhookUrl
    end
end)

-- D·ªçn d·∫πp khi ng∆∞·ªùi ch∆°i r·ªùi
Players.PlayerRemoving:Connect(function(player)
    playerWebhooks[player] = nil
end)